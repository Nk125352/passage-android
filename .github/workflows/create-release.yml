name: Create Release

on:
  workflow_dispatch:
    inputs:
      release-type:
        required: true
        type: choice
        description: What type of release
        options:
          - major
          - minor
          - patch

jobs:
  determine-next-versions:
    name: Determine Next Version
    runs-on: ubuntu-latest

    outputs:
      next-major: ${{ steps.nexttag.outputs.major }}
      next-minor: ${{ steps.nexttag.outputs.minor }}
      next-patch: ${{ steps.nexttag.outputs.patch }}
      branch-major: ${{ steps.branchnames.outputs.major-branch }}
      branch-minor: ${{ steps.branchnames.outputs.minor-branch }}
      branch-patch: ${{ steps.branchnames.outputs.patch-branch }}

    steps:
      - name: Check out code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Get Previous Tag
        id: previoustag
        uses: "WyriHaximus/github-action-get-previous-tag@v1"
        with:
          fallback: 0.0.0

      - name: Get Next Versions
        id: nexttag
        uses: "WyriHaximus/github-action-next-semvers@v1"
        with:
          version: ${{ steps.previoustag.outputs.tag }}

      - name: Build Branch Names
        id: branchnames
        run: |
          echo "major-branch=release-major-v${{ steps.nexttag.outputs.major }}" >> $GITHUB_OUTPUT
          echo "minor-branch=release-minor-v${{ steps.nexttag.outputs.minor }}" >> $GITHUB_OUTPUT
          echo "patch-branch=release-patch-v${{ steps.nexttag.outputs.patch }}" >> $GITHUB_OUTPUT

  create-release-branch:
    name: Create Release Branch
    runs-on: ubuntu-latest
    needs: determine-next-versions

    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Create major release branch
        if: ${{ github.event.inputs.release-type == 'major' }}
        run: |
          git checkout -b ${{needs.determine-next-versions.outputs.branch-major}}
          git push origin ${{needs.determine-next-versions.outputs.branch-major}}

      - name: Create minor release branch
        if: ${{ github.event.inputs.release-type == 'minor' }}
        run: |
          git checkout -b ${{needs.determine-next-versions.outputs.branch-minor}}
          git push origin ${{needs.determine-next-versions.outputs.branch-minor}}

      - name: Create patch release branch
        if: ${{ github.event.inputs.release-type == 'patch' }}
        run: |
          git checkout -b ${{needs.determine-next-versions.outputs.branch-patch}}
          git push origin ${{needs.determine-next-versions.outputs.branch-patch}}

  bump-version:
    name: Bump the Version
    runs-on: ubuntu-latest
    needs: [determine-next-versions, create-release-branch]

    steps:
      - name: Check out code - major release
        uses: actions/checkout@v3
        if: ${{ github.event.inputs.release-type == 'major' }}
        with:
          ref: ${{needs.determine-next-versions.outputs.branch-major}}

      - name: Check out code - minor release
        uses: actions/checkout@v3
        if: ${{ github.event.inputs.release-type == 'minor' }}
        with:
          ref: ${{needs.determine-next-versions.outputs.branch-minor}}

      - name: Check out code - patch release
        uses: actions/checkout@v3
        if: ${{ github.event.inputs.release-type == 'patch' }}
        with:
          ref: ${{needs.determine-next-versions.outputs.branch-patch}}

      - name: Update major version
        if: ${{ github.event.inputs.release-type == 'major' }}
        run: |
          new_version=${{ needs.determine-next-versions.outputs.next-major }}
          sed -i "s/versionName \".*\"/versionName \"$new_version\"/" app/build.gradle
          sed -i "s/versionCode .*/versionCode ${new_version//./}/" app/build.gradle
          echo "Updated to major version $new_version"

      - name: Update minor version
        if: ${{ github.event.inputs.release-type == 'minor' }}
        run: |
          new_version=${{ needs.determine-next-versions.outputs.next-minor }}
          sed -i "s/versionName \".*\"/versionName \"$new_version\"/" app/build.gradle
          sed -i "s/versionCode .*/versionCode ${new_version//./}/" app/build.gradle
          echo "Updated to minor version $new_version"

      - name: Update patch version
        if: ${{ github.event.inputs.release-type == 'patch' }}
        run: |
          new_version=${{ needs.determine-next-versions.outputs.next-patch }}
          sed -i "s/versionName \".*\"/versionName \"$new_version\"/" app/build.gradle
          sed -i "s/versionCode .*/versionCode ${new_version//./}/" app/build.gradle
          echo "Updated to patch version $new_version"

      - name: Update version in README
        run: |
          new_version=${{ needs.determine-next-versions.outputs.next-${{ github.event.inputs.release-type }} }}
          sed -i "s/version: [0-9]*\.[0-9]*\.[0-9]*/version: $new_version/" README.md
          echo "Updated README to version $new_version"

      - name: Commit version change
        uses: stefanzweifel/git-auto-commit-action@v4
        with:
          commit_message: "Bumped version to ${{ needs.determine-next-versions.outputs.next-${{ github.event.inputs.release-type }} }}"
          branch: ${{ needs.determine-next-versions.outputs.branch-${{ github.event.inputs.release-type }} }}

  create-github-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [determine-next-versions, create-release-branch, bump-version]

    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Create Release
        uses: ncipollo/release-action@v1
        with:
          tag: "v${{ needs.determine-next-versions.outputs.next-${{ github.event.inputs.release-type }} }}"
          generateReleaseNotes: true
          draft: false

  publish-sdk:
    name: Publish SDK
    runs-on: ubuntu-latest
    needs: [determine-next-versions, create-release-branch, bump-version, create-github-release]

    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          distribution: 'adopt'
          java-version: '17'

      - name: Set up GPG
        env:
          GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}
          GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
          GPG_KEY_ID: ${{ secrets.GPG_KEY_ID }}
        run: |
          echo "${GPG_PRIVATE_KEY}" | gpg --batch --import
          echo "signing.gnupg.keyName=${GPG_KEY_ID}" >> gradle.properties
          echo "signing.gnupg.passphrase=${GPG_PASSPHRASE}" >> gradle.properties

      - name: Publish to Maven Central
        env:
          OSSRH_USERNAME: ${{ secrets.OSSRH_USERNAME }}
          OSSRH_PASSWORD: ${{ secrets.OSSRH_PASSWORD }}
        run: ./gradlew :passage:publish

      - name: Wait for Staging Repository to be Created
        run: sleep 60

      - name: Install xmllint
        run: sudo apt-get install -y libxml2-utils

      - name: Get Staging Repository ID
        id: get_repo_id
        env:
          OSSRH_USERNAME: ${{ secrets.OSSRH_USERNAME }}
          OSSRH_PASSWORD: ${{ secrets.OSSRH_PASSWORD }}
        run: |
          response=$(curl -u ${OSSRH_USERNAME}:${OSSRH_PASSWORD} -X GET "https://s01.oss.sonatype.org/service/local/staging/profile_repositories")
          repo_id=$(echo ${response} | xmllint --xpath "string(//stagingProfileRepository/repositoryId)" -)
          echo "::set-output name=repo_id::${repo_id}"

      - name: Close and Release Repository
        env:
          OSSRH_USERNAME: ${{ secrets.OSSRH_USERNAME }}
          OSSRH_PASSWORD: ${{ secrets.OSSRH_PASSWORD }}
          OSSRH_PROFILE_ID: ${{ secrets.OSSRH_PROFILE_ID }}
        run: |
          repo_id=${{ steps.get_repo_id.outputs.repo_id }}
          
          close_xml="
          <promoteRequest>
            <data>
              <stagedRepositoryId>${repo_id}</stagedRepositoryId>
            </data>
          </promoteRequest>"
          echo "Close XML: ${close_xml}"
          
          curl -u ${OSSRH_USERNAME}:${OSSRH_PASSWORD} \
               -X POST https://s01.oss.sonatype.org/service/local/staging/profiles/${OSSRH_PROFILE_ID}/finish \
               -H "Content-Type: application/xml" \
               -d "${close_xml}"
          
          # Wait for repository to close
          sleep 60
          
          promote_xml="
          <promoteRequest>
            <data>
              <stagedRepositoryId>${repo_id}</stagedRepositoryId>
            </data>
          </promoteRequest>"
          echo "Promote XML: ${promote_xml}"
          
          curl -u ${OSSRH_USERNAME}:${OSSRH_PASSWORD} \
               -X POST https://s01.oss.sonatype.org/service/local/staging/profiles/${OSSRH_PROFILE_ID}/promote \
               -H "Content-Type: application/xml" \
               -d "${promote_xml}"
