/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package id.passage.android.passageflex.api

import java.io.IOException
import okhttp3.OkHttpClient
import okhttp3.HttpUrl

import id.passage.android.passageflex.model.ActivateOneTimePasscodeRequest
import id.passage.android.passageflex.model.AuthResponse
import id.passage.android.passageflex.model.Model400Error
import id.passage.android.passageflex.model.Model401Error
import id.passage.android.passageflex.model.Model403Error
import id.passage.android.passageflex.model.Model404Error
import id.passage.android.passageflex.model.Model500Error

import com.squareup.moshi.Json

import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.withContext
import id.passage.passageflex.client.infrastructure.ApiClient
import id.passage.passageflex.client.infrastructure.ApiResponse
import id.passage.passageflex.client.infrastructure.ClientException
import id.passage.passageflex.client.infrastructure.ClientError
import id.passage.passageflex.client.infrastructure.ServerException
import id.passage.passageflex.client.infrastructure.ServerError
import id.passage.passageflex.client.infrastructure.MultiValueMap
import id.passage.passageflex.client.infrastructure.PartConfig
import id.passage.passageflex.client.infrastructure.RequestConfig
import id.passage.passageflex.client.infrastructure.RequestMethod
import id.passage.passageflex.client.infrastructure.ResponseType
import id.passage.passageflex.client.infrastructure.Success
import id.passage.passageflex.client.infrastructure.toMultiValue

class OTPAPI(basePath: kotlin.String = defaultBasePath, client: OkHttpClient = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "https://auth.passage.id/v1")
        }
    }

    /**
     * Authenticate OTP
     * Authenticate a one-time passcode for a user. This endpoint checks that the one-time passcode is valid, then returns an authentication token for the user.
     * @param appId App ID
     * @param activateOneTimePasscodeRequest User Data
     * @return AuthResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun activateOneTimePasscode(appId: kotlin.String, activateOneTimePasscodeRequest: ActivateOneTimePasscodeRequest) : AuthResponse = withContext(Dispatchers.IO) {
        val localVarResponse = activateOneTimePasscodeWithHttpInfo(appId = appId, activateOneTimePasscodeRequest = activateOneTimePasscodeRequest)

        return@withContext when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as AuthResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Authenticate OTP
     * Authenticate a one-time passcode for a user. This endpoint checks that the one-time passcode is valid, then returns an authentication token for the user.
     * @param appId App ID
     * @param activateOneTimePasscodeRequest User Data
     * @return ApiResponse<AuthResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    suspend fun activateOneTimePasscodeWithHttpInfo(appId: kotlin.String, activateOneTimePasscodeRequest: ActivateOneTimePasscodeRequest) : ApiResponse<AuthResponse?> = withContext(Dispatchers.IO) {
        val localVariableConfig = activateOneTimePasscodeRequestConfig(appId = appId, activateOneTimePasscodeRequest = activateOneTimePasscodeRequest)

        return@withContext request<ActivateOneTimePasscodeRequest, AuthResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation activateOneTimePasscode
     *
     * @param appId App ID
     * @param activateOneTimePasscodeRequest User Data
     * @return RequestConfig
     */
    fun activateOneTimePasscodeRequestConfig(appId: kotlin.String, activateOneTimePasscodeRequest: ActivateOneTimePasscodeRequest) : RequestConfig<ActivateOneTimePasscodeRequest> {
        val localVariableBody = activateOneTimePasscodeRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/apps/{app_id}/otp/activate".replace("{"+"app_id"+"}", encodeURIComponent(appId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
