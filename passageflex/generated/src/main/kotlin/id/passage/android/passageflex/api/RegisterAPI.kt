/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package id.passage.android.passageflex.api

import java.io.IOException
import okhttp3.OkHttpClient
import okhttp3.HttpUrl

import id.passage.android.passageflex.model.AuthResponse
import id.passage.android.passageflex.model.Model400Error
import id.passage.android.passageflex.model.Model401Error
import id.passage.android.passageflex.model.Model403Error
import id.passage.android.passageflex.model.Model404Error
import id.passage.android.passageflex.model.Model500Error
import id.passage.android.passageflex.model.Nonce
import id.passage.android.passageflex.model.OneTimePasscodeResponse
import id.passage.android.passageflex.model.RegisterMagicLinkRequest
import id.passage.android.passageflex.model.RegisterMagicLinkResponse
import id.passage.android.passageflex.model.RegisterOneTimePasscodeRequest
import id.passage.android.passageflex.model.RegisterWebAuthnFinishRequest
import id.passage.android.passageflex.model.RegisterWebAuthnFinishWithTransactionRequest
import id.passage.android.passageflex.model.RegisterWebAuthnStartRequest
import id.passage.android.passageflex.model.RegisterWebAuthnStartResponse
import id.passage.android.passageflex.model.RegisterWebAuthnStartWithTransactionRequest
import id.passage.android.passageflex.model.RegisterWebAuthnStartWithTransactionResponse

import com.squareup.moshi.Json

import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.withContext
import id.passage.passageflex.client.infrastructure.ApiClient
import id.passage.passageflex.client.infrastructure.ApiResponse
import id.passage.passageflex.client.infrastructure.ClientException
import id.passage.passageflex.client.infrastructure.ClientError
import id.passage.passageflex.client.infrastructure.ServerException
import id.passage.passageflex.client.infrastructure.ServerError
import id.passage.passageflex.client.infrastructure.MultiValueMap
import id.passage.passageflex.client.infrastructure.PartConfig
import id.passage.passageflex.client.infrastructure.RequestConfig
import id.passage.passageflex.client.infrastructure.RequestMethod
import id.passage.passageflex.client.infrastructure.ResponseType
import id.passage.passageflex.client.infrastructure.Success
import id.passage.passageflex.client.infrastructure.toMultiValue

class RegisterAPI(basePath: kotlin.String = defaultBasePath, client: OkHttpClient = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "https://auth.passage.id/v1")
        }
    }

    /**
     * Register with Magic Link
     * Create a user and send an registration email or SMS to the user. The user will receive an email or text with a link to complete their registration.
     * @param appId App ID
     * @param user User Data
     * @return RegisterMagicLinkResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun registerMagicLink(appId: kotlin.String, user: RegisterMagicLinkRequest) : RegisterMagicLinkResponse = withContext(Dispatchers.IO) {
        val localVarResponse = registerMagicLinkWithHttpInfo(appId = appId, user = user)

        return@withContext when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as RegisterMagicLinkResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Register with Magic Link
     * Create a user and send an registration email or SMS to the user. The user will receive an email or text with a link to complete their registration.
     * @param appId App ID
     * @param user User Data
     * @return ApiResponse<RegisterMagicLinkResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    suspend fun registerMagicLinkWithHttpInfo(appId: kotlin.String, user: RegisterMagicLinkRequest) : ApiResponse<RegisterMagicLinkResponse?> = withContext(Dispatchers.IO) {
        val localVariableConfig = registerMagicLinkRequestConfig(appId = appId, user = user)

        return@withContext request<RegisterMagicLinkRequest, RegisterMagicLinkResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation registerMagicLink
     *
     * @param appId App ID
     * @param user User Data
     * @return RequestConfig
     */
    fun registerMagicLinkRequestConfig(appId: kotlin.String, user: RegisterMagicLinkRequest) : RequestConfig<RegisterMagicLinkRequest> {
        val localVariableBody = user
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/apps/{app_id}/register/magic-link".replace("{"+"app_id"+"}", encodeURIComponent(appId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * Register with OTP
     * Create a user and send a registration email or SMS to the user. The user will receive an email or text with a one-time passcode to complete their registration.
     * @param appId App ID
     * @param registerOneTimePasscodeRequest User Data
     * @return OneTimePasscodeResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun registerOneTimePasscode(appId: kotlin.String, registerOneTimePasscodeRequest: RegisterOneTimePasscodeRequest) : OneTimePasscodeResponse = withContext(Dispatchers.IO) {
        val localVarResponse = registerOneTimePasscodeWithHttpInfo(appId = appId, registerOneTimePasscodeRequest = registerOneTimePasscodeRequest)

        return@withContext when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as OneTimePasscodeResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Register with OTP
     * Create a user and send a registration email or SMS to the user. The user will receive an email or text with a one-time passcode to complete their registration.
     * @param appId App ID
     * @param registerOneTimePasscodeRequest User Data
     * @return ApiResponse<OneTimePasscodeResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    suspend fun registerOneTimePasscodeWithHttpInfo(appId: kotlin.String, registerOneTimePasscodeRequest: RegisterOneTimePasscodeRequest) : ApiResponse<OneTimePasscodeResponse?> = withContext(Dispatchers.IO) {
        val localVariableConfig = registerOneTimePasscodeRequestConfig(appId = appId, registerOneTimePasscodeRequest = registerOneTimePasscodeRequest)

        return@withContext request<RegisterOneTimePasscodeRequest, OneTimePasscodeResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation registerOneTimePasscode
     *
     * @param appId App ID
     * @param registerOneTimePasscodeRequest User Data
     * @return RequestConfig
     */
    fun registerOneTimePasscodeRequestConfig(appId: kotlin.String, registerOneTimePasscodeRequest: RegisterOneTimePasscodeRequest) : RequestConfig<RegisterOneTimePasscodeRequest> {
        val localVariableBody = registerOneTimePasscodeRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/apps/{app_id}/register/otp".replace("{"+"app_id"+"}", encodeURIComponent(appId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * Finish WebAuthn Registration
     * Complete a WebAuthn registration and authenticate the user. This endpoint accepts and verifies the response from &#x60;navigator.credential.create()&#x60; and returns an authentication token for the user.
     * @param appId App ID
     * @param registerWebAuthnFinishRequest WebAuthn Response Data
     * @return AuthResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun registerWebauthnFinish(appId: kotlin.String, registerWebAuthnFinishRequest: RegisterWebAuthnFinishRequest) : AuthResponse = withContext(Dispatchers.IO) {
        val localVarResponse = registerWebauthnFinishWithHttpInfo(appId = appId, registerWebAuthnFinishRequest = registerWebAuthnFinishRequest)

        return@withContext when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as AuthResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Finish WebAuthn Registration
     * Complete a WebAuthn registration and authenticate the user. This endpoint accepts and verifies the response from &#x60;navigator.credential.create()&#x60; and returns an authentication token for the user.
     * @param appId App ID
     * @param registerWebAuthnFinishRequest WebAuthn Response Data
     * @return ApiResponse<AuthResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    suspend fun registerWebauthnFinishWithHttpInfo(appId: kotlin.String, registerWebAuthnFinishRequest: RegisterWebAuthnFinishRequest) : ApiResponse<AuthResponse?> = withContext(Dispatchers.IO) {
        val localVariableConfig = registerWebauthnFinishRequestConfig(appId = appId, registerWebAuthnFinishRequest = registerWebAuthnFinishRequest)

        return@withContext request<RegisterWebAuthnFinishRequest, AuthResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation registerWebauthnFinish
     *
     * @param appId App ID
     * @param registerWebAuthnFinishRequest WebAuthn Response Data
     * @return RequestConfig
     */
    fun registerWebauthnFinishRequestConfig(appId: kotlin.String, registerWebAuthnFinishRequest: RegisterWebAuthnFinishRequest) : RequestConfig<RegisterWebAuthnFinishRequest> {
        val localVariableBody = registerWebAuthnFinishRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/apps/{app_id}/register/webauthn/finish".replace("{"+"app_id"+"}", encodeURIComponent(appId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * Finish WebAuthn registration with a transaction
     * Complete a WebAuthn registration and authenticate the user via a transaction. This endpoint accepts and verifies the response from &#x60;navigator.credential.create()&#x60; and returns a nonce meant to be exchanged for an authentication token for the user.
     * @param appId App ID
     * @param registerWebAuthnFinishWithTransactionRequest 
     * @return Nonce
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun registerWebauthnFinishWithTransaction(appId: kotlin.String, registerWebAuthnFinishWithTransactionRequest: RegisterWebAuthnFinishWithTransactionRequest) : Nonce = withContext(Dispatchers.IO) {
        val localVarResponse = registerWebauthnFinishWithTransactionWithHttpInfo(appId = appId, registerWebAuthnFinishWithTransactionRequest = registerWebAuthnFinishWithTransactionRequest)

        return@withContext when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as Nonce
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Finish WebAuthn registration with a transaction
     * Complete a WebAuthn registration and authenticate the user via a transaction. This endpoint accepts and verifies the response from &#x60;navigator.credential.create()&#x60; and returns a nonce meant to be exchanged for an authentication token for the user.
     * @param appId App ID
     * @param registerWebAuthnFinishWithTransactionRequest 
     * @return ApiResponse<Nonce?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    suspend fun registerWebauthnFinishWithTransactionWithHttpInfo(appId: kotlin.String, registerWebAuthnFinishWithTransactionRequest: RegisterWebAuthnFinishWithTransactionRequest) : ApiResponse<Nonce?> = withContext(Dispatchers.IO) {
        val localVariableConfig = registerWebauthnFinishWithTransactionRequestConfig(appId = appId, registerWebAuthnFinishWithTransactionRequest = registerWebAuthnFinishWithTransactionRequest)

        return@withContext request<RegisterWebAuthnFinishWithTransactionRequest, Nonce>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation registerWebauthnFinishWithTransaction
     *
     * @param appId App ID
     * @param registerWebAuthnFinishWithTransactionRequest 
     * @return RequestConfig
     */
    fun registerWebauthnFinishWithTransactionRequestConfig(appId: kotlin.String, registerWebAuthnFinishWithTransactionRequest: RegisterWebAuthnFinishWithTransactionRequest) : RequestConfig<RegisterWebAuthnFinishWithTransactionRequest> {
        val localVariableBody = registerWebAuthnFinishWithTransactionRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/apps/{app_id}/register/transactions/webauthn/finish".replace("{"+"app_id"+"}", encodeURIComponent(appId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * Start WebAuthn Register
     * Initiate a WebAuthn registration and create the user. This endpoint creates a WebAuthn credential creation challenge that is used to perform the registration ceremony from the browser.
     * @param appId App ID
     * @param registerWebAuthnStartRequest User Data
     * @return RegisterWebAuthnStartResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun registerWebauthnStart(appId: kotlin.String, registerWebAuthnStartRequest: RegisterWebAuthnStartRequest) : RegisterWebAuthnStartResponse = withContext(Dispatchers.IO) {
        val localVarResponse = registerWebauthnStartWithHttpInfo(appId = appId, registerWebAuthnStartRequest = registerWebAuthnStartRequest)

        return@withContext when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as RegisterWebAuthnStartResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Start WebAuthn Register
     * Initiate a WebAuthn registration and create the user. This endpoint creates a WebAuthn credential creation challenge that is used to perform the registration ceremony from the browser.
     * @param appId App ID
     * @param registerWebAuthnStartRequest User Data
     * @return ApiResponse<RegisterWebAuthnStartResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    suspend fun registerWebauthnStartWithHttpInfo(appId: kotlin.String, registerWebAuthnStartRequest: RegisterWebAuthnStartRequest) : ApiResponse<RegisterWebAuthnStartResponse?> = withContext(Dispatchers.IO) {
        val localVariableConfig = registerWebauthnStartRequestConfig(appId = appId, registerWebAuthnStartRequest = registerWebAuthnStartRequest)

        return@withContext request<RegisterWebAuthnStartRequest, RegisterWebAuthnStartResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation registerWebauthnStart
     *
     * @param appId App ID
     * @param registerWebAuthnStartRequest User Data
     * @return RequestConfig
     */
    fun registerWebauthnStartRequestConfig(appId: kotlin.String, registerWebAuthnStartRequest: RegisterWebAuthnStartRequest) : RequestConfig<RegisterWebAuthnStartRequest> {
        val localVariableBody = registerWebAuthnStartRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/apps/{app_id}/register/webauthn/start".replace("{"+"app_id"+"}", encodeURIComponent(appId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * Start WebAuthn registration with a transaction
     * Initiate a WebAuthn registration and create the user via a transaction. This endpoint creates a WebAuthn credential creation challenge that is used to perform the registration ceremony from the browser.
     * @param appId App ID
     * @param registerWebAuthnStartWithTransactionRequest 
     * @return RegisterWebAuthnStartWithTransactionResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun registerWebauthnStartWithTransaction(appId: kotlin.String, registerWebAuthnStartWithTransactionRequest: RegisterWebAuthnStartWithTransactionRequest) : RegisterWebAuthnStartWithTransactionResponse = withContext(Dispatchers.IO) {
        val localVarResponse = registerWebauthnStartWithTransactionWithHttpInfo(appId = appId, registerWebAuthnStartWithTransactionRequest = registerWebAuthnStartWithTransactionRequest)

        return@withContext when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as RegisterWebAuthnStartWithTransactionResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Start WebAuthn registration with a transaction
     * Initiate a WebAuthn registration and create the user via a transaction. This endpoint creates a WebAuthn credential creation challenge that is used to perform the registration ceremony from the browser.
     * @param appId App ID
     * @param registerWebAuthnStartWithTransactionRequest 
     * @return ApiResponse<RegisterWebAuthnStartWithTransactionResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    suspend fun registerWebauthnStartWithTransactionWithHttpInfo(appId: kotlin.String, registerWebAuthnStartWithTransactionRequest: RegisterWebAuthnStartWithTransactionRequest) : ApiResponse<RegisterWebAuthnStartWithTransactionResponse?> = withContext(Dispatchers.IO) {
        val localVariableConfig = registerWebauthnStartWithTransactionRequestConfig(appId = appId, registerWebAuthnStartWithTransactionRequest = registerWebAuthnStartWithTransactionRequest)

        return@withContext request<RegisterWebAuthnStartWithTransactionRequest, RegisterWebAuthnStartWithTransactionResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation registerWebauthnStartWithTransaction
     *
     * @param appId App ID
     * @param registerWebAuthnStartWithTransactionRequest 
     * @return RequestConfig
     */
    fun registerWebauthnStartWithTransactionRequestConfig(appId: kotlin.String, registerWebAuthnStartWithTransactionRequest: RegisterWebAuthnStartWithTransactionRequest) : RequestConfig<RegisterWebAuthnStartWithTransactionRequest> {
        val localVariableBody = registerWebAuthnStartWithTransactionRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/apps/{app_id}/register/transactions/webauthn/start".replace("{"+"app_id"+"}", encodeURIComponent(appId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
